//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Thomas, Catherine on 12/18/16.
//  Copyright Â© 2016 catt. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UITextFieldDelegate, CompactViewDelegate {
    @IBOutlet weak var textField: UITextField!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var compactView: UIView!
    @IBOutlet weak var getCatButton: UIButton!
    @IBOutlet weak var sendCatButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUpCompactView()
        self.setUpTextField()
        self.setUpImageView()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        switch presentationStyle {
        case .compact:
            textField.isUserInteractionEnabled = false
            compactView.isHidden = false
        case .expanded:
            textField.isUserInteractionEnabled = true
            compactView.isHidden = true
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    // MARK: Actions
    
    @IBAction func tappedTextField() {
        requestPresentationStyle(.expanded)
    }
    
    @IBAction func sendCatPressed() {
        if textField.isFirstResponder {
            textField.resignFirstResponder()
        }
        
        if let conversation = activeConversation {
            // -------------------- VARIABLE DECLARATION ---------------------//
            let layout = MSMessageTemplateLayout()
            layout.image = imageView.image
            
            let message = MSMessage()
            message.layout = layout
            
            // -------------------- COMMENTS ---------------------//
            conversation.insert(message, completionHandler: { (error: Error?) in
                print(error ?? "sigh") //add better error handing here
            })
            
            requestPresentationStyle(.compact)
        }
    }
    
    @IBAction func getCatPressed() {
        if textField.isFirstResponder {
            textField.resignFirstResponder()
        }
        
        if let text = textField.text, text != "" {
            CatManager.sharedInstance.getCat(text: text, success: { [weak self] (cat) in
                if let cat = cat {
                    DispatchQueue.main.async {
                        self?.imageView.image = cat
                    }
                }
            })
        } else {
            CatManager.sharedInstance.getCat(success: { [weak self] (cat) in
                if let cat = cat {
                    DispatchQueue.main.async {
                        self?.imageView.image = cat
                    }
                }
            })
        }
    }
    
    // MARK: Helper Functions
    
    func setUpCompactView() {
        if let view = Bundle.main.loadNibNamed("CompactView", owner: self, options: nil)?.first as? CompactView {
            view.delegate = self
            compactView.addSubview(view)
            
            let horizontalConstraint = NSLayoutConstraint(item: compactView, attribute: NSLayoutAttribute.centerX, relatedBy: NSLayoutRelation.equal, toItem: view, attribute: NSLayoutAttribute.centerX, multiplier: 1, constant: 0)
            let verticalConstraint = NSLayoutConstraint(item: compactView, attribute: NSLayoutAttribute.centerY, relatedBy: NSLayoutRelation.equal, toItem: view, attribute: NSLayoutAttribute.centerY, multiplier: 1, constant: 0)
            let widthConstraint = NSLayoutConstraint(item: view, attribute: NSLayoutAttribute.width, relatedBy: NSLayoutRelation.equal, toItem: compactView, attribute: NSLayoutAttribute.width, multiplier: 1, constant: 0)
            let heightConstraint = NSLayoutConstraint(item: view, attribute: NSLayoutAttribute.height, relatedBy: NSLayoutRelation.equal, toItem: compactView, attribute: NSLayoutAttribute.height, multiplier: 1, constant: 0)
            
            compactView.addConstraints([horizontalConstraint, verticalConstraint, widthConstraint, heightConstraint])
        }
        
        // -------------------- IF STATEMENT ---------------------//
        if presentationStyle == .expanded {
            compactView.isHidden = true
        } else {
            compactView.isHidden = false
        }
    }
    
    func setUpTextField() {
        textField.clearButtonMode = .whileEditing
        
        // Gesture recognizers for when text field is active
        let tap = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        self.view.addGestureRecognizer(tap)
        
        let tapGetCat = UITapGestureRecognizer(target: self, action: #selector(getCatPressed))
        self.getCatButton.addGestureRecognizer(tapGetCat)
        
        let tapSendCat = UITapGestureRecognizer(target: self, action: #selector(sendCatPressed))
        self.sendCatButton.addGestureRecognizer(tapSendCat)
        
        // Add slight indentation
        let spacerView = UIView(frame:CGRect(x:0, y:0, width:10, height:10))
        textField.leftViewMode = .always
        textField.leftView = spacerView
    }
    
    func setUpImageView() {
        CatManager.sharedInstance.getCat(text: "sup") { [weak self] (cat) in
            if let cat = cat {
                DispatchQueue.main.async {
                    self?.imageView.image = cat
                }
            }
        }
    }
    
    func dismissKeyboard() {
        self.textField.resignFirstResponder()
    }
    
    func expandRequested() {
        requestPresentationStyle(.expanded)
    }
}
